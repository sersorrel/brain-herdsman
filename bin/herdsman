#!/usr/bin/env python
from argparse import ArgumentParser
from autobahn.twisted.resource import WSGIRootResource
from autobahn.twisted.websocket import (WebSocketServerFactory,
                                        WebSocketServerProtocol)
from autobahn.twisted.resource import (WebSocketResource,
                                       WSGIRootResource)
from flask import (Flask, jsonify, g, request)
from twisted.internet import reactor
from twisted.web.server import Site
from twisted.web.wsgi import WSGIResource
from herdsman.usercode import UserCodeManager
import tarfile

class HerdsmanAPI(Flask):
    def __init__(self, ucodeman, *args, **kw):
        Flask.__init__(self, *args, **kw)
        self.ucodeman = ucodeman

        self.route("/")(self.home)
        self.route("/load", methods=["POST"])(self.load)
        self.route("/stop")(self.stop)
        self.route("/start")(self.start)
        self.route("/settings/zone", methods=["GET", "PUT"])(self.settings_zone)
        self.route("/settings/mode")(self.settings_mode)
        self.route("/log")(self.log)

    def home(self):
        return "Hi"

    def load(self):
        "Load code into the robot"
        # TODO: Only allow this in the right state

        if "usercode.tar" not in request.files:
            # TODO: Sanitise errors
            return "ERROR"

        f = request.files["usercode.tar"]
        self.ucodeman.load(f)
        return "OK"

    def stop(self):
        "Stop the current code from executing"
        # TODO: Only allow this when in the right state
        self.ucodeman.stop()
        return "OK"

    def start(self):
        "Send the start signal to the current code"
        # TODO: Only allow this when in the right state
        self.ucodeman.start()
        return "OK"

    def settings_zone(self):
        "Set the zone -- 0-4"
        # TODO: Only allow this before the start signal has been sent

        if request.method == "GET":
            "Zone is being read"
            return jsonify(zone=self.ucodeman.zone)

        # Zone is being set
        if "zone" not in request.form:
            # TODO: Return a more sensible/uniform error
            return "ERROR"

        zone = int(request.form["zone"])
        if zone < 0 or zone > 3:
            # TODO: Sanitise errors
            return "ERROR"

        self.ucodeman.zone = zone
        return "OK"

    def settings_mode(self):
        "Set the mode -- 'comp' or 'dev'"
        # TODO: Only allow this before the start signal has been sent

        # PUT for setting the mode
        # GET for getting the mode
        pass

    def log(self):
        return "Not implemented"

class TestProto(WebSocketServerProtocol):

    def onMessage(self, payload, isBinary):
        self.sendMessage("hey!")

parser = ArgumentParser( description = "Control robot code via HTTP" )

parser.add_argument("-d", "--debug",
                    action="store_true",
                    help="Run the server in debug mode")

parser.add_argument("-p", "--port",
                    type=int, default=80,
                    help="The port to listen on")

parser.add_argument("-l", "--log-dir",
                    type=str, default="./",
                    help="The directory to store the log in")

args = parser.parse_args()

ucodeman = UserCodeManager(args.log_dir)

ws_factory = WebSocketServerFactory()
ws_factory.protocol = TestProto
ws_resource = WebSocketResource(ws_factory)

app = HerdsmanAPI(ucodeman, __name__)
app.debug = args.debug

# WSGI resource for the flask server
app_resource = WSGIResource(reactor, reactor.getThreadPool(), app)

# Root resource
root = WSGIRootResource(app_resource,
                        {"ws": ws_resource})

site = Site(root)
reactor.listenTCP(args.port, site)
reactor.run()

