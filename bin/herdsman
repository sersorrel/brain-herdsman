#!/usr/bin/env python
from argparse import ArgumentParser
import sys

from autobahn.twisted import wamp
from twisted.internet import reactor
from twisted.python import log
from twisted.web import server, static

from sr.herdsman import usercode
from sr.herdsman.usercode import UserCodeManager
from sr.herdsman.powerhack import get_power
from sr.herdsman.compkey import load_mode_settings


class HerdsmanWAMP(wamp.ApplicationSession):

    state_map = { UserCodeManager.S_IDLE: "stopped",
                  UserCodeManager.S_LOADED: "stopped",
                  UserCodeManager.S_STARTED: "started",
                  UserCodeManager.S_KILLING: "stopping" }

    def __init__(self, ucode, *args, **kw):
        self.ucode = ucode
        self.log_line = 0
        wamp.ApplicationSession.__init__(self, *args, **kw)

    def onJoin(self, details):
        self.register(self.srobo_hello, "org.srobo.hello")
        self.register(self.srobo_get_zone, "org.srobo.zone")
        self.register(self.srobo_get_mode, "org.srobo.mode")
        self.register(self.srobo_logs_all, "org.srobo.logs.all")
        self.register(self.srobo_logs_get, "org.srobo.logs.get")
        self.register(self.srobo_start, "org.srobo.start")
        self.register(self.srobo_stop, "org.srobo.stop")
        self.register(self.srobo_state, "org.srobo.state")
        self.register(self.srobo_env_version, "org.srobo.environment.version")
        self.register(self.srobo_proj_name, "org.srobo.project.name")
        self.register(self.srobo_proj_version, "org.srobo.project.version")

        self.subscribe(self.srobo_set_zone, "org.srobo.zone")
        self.subscribe(self.srobo_set_mode, "org.srobo.mode")

        self.ucode.state_change_cb = self.state_change_cb
        self.ucode.log_line_cb = self.log_line_cb
        self.ucode.proj_meta_cb = self.proj_meta_cb

    def state_change_cb(self, state):
        self.publish("org.srobo.state", self.state_map[state])

    def log_line_cb(self, line):
        self.publish("org.srobo.logs.append", "current", line.strip(), self.log_line)
        self.log_line += 1

    def proj_meta_cb(self, metadata):
        self.publish("org.srobo.project.name", metadata['name'])
        self.publish("org.srobo.project.version", metadata['version'])

    @staticmethod
    def srobo_hello(client_version):
        major, minor, patch = [int(x) for x in client_version.split(".")]
        return {"compatible": True}

    def srobo_get_zone(self):
        return self.ucode.zone

    def srobo_set_zone(self, zone):
        self.ucode.zone = zone

    def srobo_get_mode(self):
        return self.ucode.mode

    def srobo_set_mode(self, mode):
        self.ucode.mode = mode

    def get_log_contents(self):
        if self.ucode.logfile is not None:
            with open(self.ucode.logfile, "r") as f:
                contents = f.read()
        else:
            contents = ""

        lines = contents.split('\r\n')
        # Remove trailing blank line if present
        if lines and not lines[-1]:
            del lines[-1]
        return lines

    def srobo_logs_all(self):
        return [{"type": "current",
                 "name": "current",
                 "title": "Current",
                 "contents": self.get_log_contents()}]

    def srobo_logs_get(self, name):
        return {"type": "old",
                "name": "old_3",
                "title": "#3",
                "contents": self.get_log_contents()}

    def srobo_start(self):
        self.ucode.start()

    def srobo_stop(self):
        self.ucode.stop()

    def srobo_state(self):
        state = self.ucode.get_state()

        if state in self.state_map:
            return self.state_map[state]

        return "stopped"

    @staticmethod
    def srobo_env_version():
        return 1

    def srobo_proj_name(self):
        return self.ucode.proj_meta['name']

    def srobo_proj_version(self):
        return self.ucode.proj_meta['version']


def create_http_server(reactor, port, static_dir):
    root = static.File(static_dir)
    site = server.Site(root)
    reactor.listenTCP(port, site)

run_led_state = False

def start_button_monitor(power, ucode):
    global run_led_state

    if power.read_button():
        ucode.start()
        run_led_state = True
    else:
        reactor.callLater(0.1, start_button_monitor, power, user)
        run_led_state = not run_led_state

    power.set_run_led(run_led_state)

if __name__ == "__main__":
    parser = ArgumentParser( description = "Control robot code via HTTP" )

    parser.add_argument("-d", "--debug",
                        action="store_true",
                        help="Run the server in debug mode")

    parser.add_argument("-p", "--port",
                        type=int, default=80,
                        help="The port to listen on")

    parser.add_argument("-w", "--wamp-port",
                        type=int, default=9000,
                        help="The port to server WAMP over")

    parser.add_argument("-l", "--log-dir",
                        type=str, default="./",
                        help="The directory to store the log in")

    parser.add_argument("-s", "--static-dir",
                        type=str,
                        help="The directory to serve statically over HTTP",
                        required=True)

    parser.add_argument("-u", "--user",
                        type=str,
                        help="Path to a robot.zip to load in")

    parser.add_argument("--comp",
                        action="store_true",
                        help="Default to competition mode")

    args = parser.parse_args()

    if args.debug:
        log.startLogging(sys.stdout)

    user = usercode.UserCodeManager(args.log_dir)

    mode_settings = load_mode_settings()

    user.zone = mode_settings.zone
    user.arena = mode_settings.arena

    if args.comp:
        user.mode = usercode.MODE_COMP
    else:
        user.mode = mode_settings.mode

    if args.user is not None:
        with open(args.user, "r") as f:
            user.load(f)

    power = get_power()
    if power is not None:
        reactor.callLater(0.1, start_button_monitor, power, user)

    url = u'ws://localhost:{}/ws'.format(args.wamp_port)
    runner = wamp.ApplicationRunner(url=url, realm=u'srobo')
    runner.run(lambda x: HerdsmanWAMP(user, x))

    create_http_server(reactor, args.port, args.static_dir)

    reactor.run()
